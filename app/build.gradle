buildscript {
    repositories {
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}

apply plugin: 'com.android.application'
apply plugin: "org.sonarqube"
apply plugin: 'jacoco'
apply plugin: 'io.fabric'
apply plugin: 'android-apt'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

jacoco {
    toolVersion "0.7.9"
}

task jacocoTestReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = files("${buildDir}/jacoco/testDebugUnitTest.exec")
}

sonarqube {
    properties {
        property "sonar.projectName", "Dispatcher Mobile"
        property "sonar.projectKey", "com.inkafarma.dispatcher"

        property "sonar.sourceEncoding","UTF-8"
        property "sonar.sources","."
        property "sonar.exclusions","build/**,**/*.png,**/*.keystore,**/*.jks,src/test/**,src/main/res/**," +
                "**/activities/**,**/mvp/view/**,**/adapters/viewholders/**"

        property "sonar.import_unknown_files", true

        property "sonar.android.lint.report", "./build/outputs/lint-results.xml"

        property "sonar.tests", "./src/test/"
        property "sonar.jacoco.reportPath", "build/jacoco/testDebugUnitTest.exec"
        property "sonar.java.test.binaries", "${project.buildDir}/intermediates/classes/debug"
    }
}

android {
    compileSdkVersion 26
    buildToolsVersion "25.0.3"
    defaultConfig {
        def buildNumber = System.getenv("BUILD_NUMBER") as Integer ?: 1
        applicationId "com.inkafarma.dispatcher"
        minSdkVersion 19
        targetSdkVersion 26
        versionCode buildNumber
        versionName "${version}-${buildNumber}"
    }

    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }

    signingConfigs {
        debug {
            storeFile file("dispatcher-ci.jks")
            storePassword "ElPrecioMasBajo"
            keyAlias "Dispatcher"
            keyPassword "ElPrecioMasBajo"
        }
        distributable {
            storeFile file("dispatcher-qa.jks")
            storePassword "ElPrecioMasBajo"
            keyAlias "Dispatcher"
            keyPassword "ElPrecioMasBajo"
        }
        uat {
            storeFile file("dispatcher-uat.jks")
            storePassword "ElPrecioMasBajo"
            keyAlias "Dispatcher"
            keyPassword "ElPrecioMasBajo"
        }
        release {
            storeFile file("dispatcher.jks")
            storePassword "ElPrecioMasBajo"
            keyAlias "Dispatcher"
            keyPassword "ElPrecioMasBajo"
        }
    }
    buildTypes {
        release {
            debuggable false
            shrinkResources true
            minifyEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            buildConfigField "String", "API_URL", "\"https://0kp0jfgrbc.execute-api.us-west-2.amazonaws.com/PROD/\""
            buildConfigField "boolean", "LOG_CRASHLYTICS", "true"
            buildConfigField "boolean", "SHOULD_LOG", "false"
        }

        uat {
            debuggable false
            shrinkResources true
            minifyEnabled true
            signingConfig signingConfigs.uat
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            buildConfigField "String", "API_URL", "\"https://0kp0jfgrbc.execute-api.us-west-2.amazonaws.com/UAT/\""
            buildConfigField "boolean", "LOG_CRASHLYTICS", "true"
            buildConfigField "boolean", "SHOULD_LOG", "true"
        }

        distributable {
            debuggable true
            shrinkResources true
            minifyEnabled true
            signingConfig signingConfigs.distributable
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            buildConfigField "String", "API_URL", "\"https://0kp0jfgrbc.execute-api.us-west-2.amazonaws.com/QA/\""
            buildConfigField "boolean", "LOG_CRASHLYTICS", "true"
            buildConfigField "boolean", "SHOULD_LOG", "true"
        }

        debug {
            testCoverageEnabled true
            buildConfigField "String", "API_URL", "\"https://0kp0jfgrbc.execute-api.us-west-2.amazonaws.com/CI/\""
            buildConfigField "boolean", "LOG_CRASHLYTICS", "false"
            buildConfigField "boolean", "SHOULD_LOG", "true"
        }

        android.applicationVariants.all { variant ->
            variant.outputs.each { output ->
                def appName = "dispatcher"
                def newApkName = "${appName}-${output.baseName}-${variant.versionName}.apk"
                output.outputFile = new File(output.outputFile.parent, newApkName)
            }
        }
    }
    useLibrary 'org.apache.http.legacy'
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.android.support:design:25.3.1'
    compile 'com.android.support:cardview-v7:25.3.1'

    compile 'com.google.android.gms:play-services-maps:10.2.4'
    compile 'com.google.android.gms:play-services-location:10.2.4'
    compile 'com.google.android.gms:play-services-analytics:10.2.4'
    compile 'com.google.firebase:firebase-messaging:10.2.4'
    compile 'com.google.firebase:firebase-auth:10.2.4'
    compile 'com.google.firebase:firebase-database:10.2.4'

    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.squareup:otto:1.3.8'
    compile 'com.jakewharton.timber:timber:4.5.1'

    compile 'com.jakewharton:butterknife:8.5.1'
    apt 'com.jakewharton:butterknife-compiler:8.5.1'

    compile 'com.squareup.retrofit2:retrofit:2.2.0'
    compile 'com.squareup.retrofit2:converter-gson:2.2.0'
    compile 'com.squareup.okhttp3:logging-interceptor:3.4.1'
    compile 'de.hdodenhof:circleimageview:2.2.0'

    compile('com.crashlytics.sdk.android:crashlytics:2.6.8@aar') {
        transitive = true;
    }

    compile 'net.danlew:android.joda:2.9.9'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.7.3'

    compile 'com.journeyapps:zxing-android-embedded:3.5.0'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.7.22'
    testCompile "org.robolectric:robolectric:3.3.2"
    testCompile 'com.squareup.okhttp3:okhttp:3.3.1'
    testCompile 'com.squareup.retrofit2:retrofit-mock:2.2.0'
    testCompile('com.squareup.assertj:assertj-android:1.1.1') {
        exclude module: 'support-annotations'
    }

    compile 'com.sothree.slidinguppanel:library:3.3.1'
    compile('com.crashlytics.sdk.android:crashlytics-ndk:2.0.2@aar') {
        transitive = true;
    }

}

apply plugin: 'com.google.gms.google-services'
apply plugin: 'checkstyle'

task checkstyle(type: Checkstyle) {
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
    exclude '**/R.java'
    exclude '**/BuildConfig.java'

    def configProps = ['proj.module.dir': projectDir.absolutePath]
    configProperties configProps

    classpath = files()
}

gradle.taskGraph.beforeTask { Task task ->
    if(task.name ==~ /process.*GoogleServices/) {
        android.applicationVariants.all { variant ->
            if(task.name ==~ /(?i)process${variant.name}GoogleServices/){
                copy {
                    from '.'
                    into '.'
                    rename { String fileName ->
                        fileName.replace("google-services-${variant.name}.json", 'google-services.json')
                    }
                    include "google-services-${variant.name}.json"
                }
            }
        }
    }
}

//preBuild.dependsOn('checkstyle')
